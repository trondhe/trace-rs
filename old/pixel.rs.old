use crate::vec3::*;

type ValueType = i8;
impl Scalar for ValueType {}
pub struct Pixel {
    data: Vec3<ValueType>,
}

impl Pixel {
    #[allow(dead_code)]
    pub fn new() -> Self {
        Pixel { data: Vec3::new() }
    }

    pub fn with_values(r: ValueType, g: ValueType, b: ValueType) -> Self {
        Pixel {
            data: Vec3::with_values(r, g, b),
        }
    }

    pub fn r(&self) -> ValueType {
        self.data.x
    }

    pub fn g(&self) -> ValueType {
        self.data.y
    }

    pub fn b(&self) -> ValueType {
        self.data.z
    }

    pub fn r_set(&mut self, value: ValueType) {
        self.data.x = value;
    }

    pub fn g_set(&mut self, value: ValueType) {
        self.data.y = value;
    }

    pub fn b_set(&mut self, value: ValueType) {
        self.data.z = value;
    }
}

impl IntoIterator for Pixel {
    type Item = ValueType;
    type IntoIter = std::vec::IntoIter<Self::Item>;

    fn into_iter(&self) -> Self::IntoIter {
        self.data.into_iter()
    }
}

impl<'a> IntoIterator for &'a Pixel {
    type Item = ValueType;
    type IntoIter = std::vec::IntoIter<Self::Item>;

    fn into_iter(self) -> Self::IntoIter {
        self.data.into_iter()
    }
}
